# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/polyamorous/all/polyamorous.rbi
#
# polyamorous-2.3.2

module Polyamorous
end
module Polyamorous::TreeNode
  def add_to_tree(hash); end
end
class Polyamorous::Join
  def ==(other); end
  def add_to_tree(hash); end
  def convert_to_arel_join_type(type); end
  def convert_to_class(value); end
  def eql?(other); end
  def hash; end
  def initialize(name, type = nil, klass = nil); end
  def klass; end
  def klass=(klass); end
  def name; end
  def name=(arg0); end
  def type; end
  def type=(type); end
  include Polyamorous::TreeNode
end
module Polyamorous::SwappingReflectionClass
  def swapping_reflection_klass(reflection, klass); end
end
module Polyamorous::JoinAssociationExtensions
  def initialize(reflection, children, polymorphic_class = nil, join_type = nil); end
  def self.prepended(base); end
  include Polyamorous::SwappingReflectionClass
end
module Polyamorous::JoinDependencyExtensions
  def build(associations, base_klass); end
  def join_constraints(joins_to_add, alias_tracker); end
  def make_constraints(parent, child, join_type = nil); end
end
module Polyamorous::JoinDependencyExtensions::ClassMethods
  def walk_tree(associations, hash); end
end
module Polyamorous::ReflectionExtensions
  def build_join_constraint(table, foreign_table); end
end
class ActiveRecord::Associations::JoinDependency::JoinAssociation < ActiveRecord::Associations::JoinDependency::JoinPart
  def join_type; end
end
