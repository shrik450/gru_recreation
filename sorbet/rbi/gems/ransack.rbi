# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/ransack/all/ransack.rbi
#
# ransack-2.3.2

module Ransack
  extend Ransack::Configuration
end
module Ransack::Constants
  def escape_wildcards(unescaped); end
  def self.escape_wildcards(unescaped); end
end
class Ransack::Predicate
  def ==(other); end
  def arel_predicate; end
  def case_insensitive; end
  def compound; end
  def eql?(other); end
  def format(val); end
  def formatter; end
  def hash; end
  def initialize(opts = nil); end
  def name; end
  def negative?; end
  def self.detect_and_strip_from_string!(str); end
  def self.detect_from_string(str, chomp: nil); end
  def self.named(name); end
  def self.names; end
  def type; end
  def validate(vals, type = nil); end
  def validator; end
  def wants_array; end
end
module Ransack::Configuration
  def add_predicate(name, opts = nil); end
  def arel_predicate_with_suffix(arel_predicate, suffix); end
  def configure; end
  def custom_arrows=(opts = nil); end
  def hide_sort_order_indicators=(boolean); end
  def ignore_unknown_conditions=(boolean); end
  def options; end
  def options=(obj); end
  def predicates; end
  def predicates=(obj); end
  def sanitize_custom_scope_booleans=(boolean); end
  def search_key=(name); end
  def self.options; end
  def self.options=(obj); end
  def self.predicates; end
  def self.predicates=(obj); end
end
class Ransack::Configuration::PredicateCollection
  def [](*args, &block); end
  def []=(key, value); end
  def has_key?(*args, &block); end
  def initialize; end
  def keys(*args, &block); end
  def sorted_names_with_underscores; end
end
module Ransack::Adapters
  def self.instantiate_object_mapper; end
  def self.object_mapper; end
end
class Ransack::Adapters::ActiveRecordAdapter
  def require_adapter; end
  def require_constants; end
  def require_context; end
  def require_nodes; end
  def require_search; end
end
class Ransack::Adapters::MongoidAdapter
  def require_adapter; end
  def require_constants; end
  def require_context; end
  def require_nodes; end
  def require_search; end
end
module Ransack::Nodes
end
module Ransack::Nodes::Bindable
  def arel_attribute; end
  def attr; end
  def attr_name; end
  def attr_name=(arg0); end
  def bound?; end
  def get_arel_attribute; end
  def get_attribute; end
  def is_alias_attribute?; end
  def klass; end
  def parent; end
  def parent=(arg0); end
  def ransacker; end
  def reset_binding!; end
end
class Ransack::Nodes::Node
  def context; end
  def contextualize(*args, &block); end
  def i18n_aliases; end
  def i18n_aliases=(val); end
  def i18n_aliases?; end
  def i18n_words; end
  def i18n_words=(val); end
  def i18n_words?; end
  def initialize(context); end
  def self.i18n_alias(opts = nil); end
  def self.i18n_aliases; end
  def self.i18n_aliases=(val); end
  def self.i18n_aliases?; end
  def self.i18n_word(*args); end
  def self.i18n_words; end
  def self.i18n_words=(val); end
  def self.i18n_words?; end
  def translate(key, options = nil); end
end
class Ransack::Nodes::Attribute < Ransack::Nodes::Node
  def ==(other); end
  def associated_collection?; end
  def blank?(*args, &block); end
  def engine(*args, &block); end
  def eql?(other); end
  def hash; end
  def initialize(context, name = nil, ransacker_args = nil); end
  def inspect; end
  def name; end
  def name=(name); end
  def persisted?; end
  def present?(*args, &block); end
  def ransacker_args; end
  def type; end
  def valid?; end
  include Ransack::Nodes::Bindable
end
class Ransack::Nodes::Value < Ransack::Nodes::Node
  def ==(other); end
  def array_of_arrays?(val); end
  def blank?(*args, &block); end
  def cast(type); end
  def cast_to_boolean(val); end
  def cast_to_date(val); end
  def cast_to_decimal(val); end
  def cast_to_float(val); end
  def cast_to_integer(val); end
  def cast_to_money(val); end
  def cast_to_string(val); end
  def cast_to_time(val); end
  def eql?(other); end
  def hash; end
  def initialize(context, value = nil); end
  def inspect; end
  def persisted?; end
  def present?(*args, &block); end
  def value; end
  def value=(arg0); end
end
class Ransack::Nodes::Condition < Ransack::Nodes::Node
  def ==(other); end
  def a; end
  def a=(args); end
  def arel_predicate; end
  def arel_predicate_for_attribute(attr); end
  def attr_value_for_attribute(attr); end
  def attributes; end
  def attributes=(args); end
  def build(params); end
  def build_attribute(name = nil, ransacker_args = nil); end
  def build_value(val = nil); end
  def casted_array?(predicate); end
  def casted_values_for_attribute(attr); end
  def combinator; end
  def combinator=(val); end
  def combinator_method; end
  def default_type; end
  def eql?(other); end
  def format_predicate(attribute); end
  def format_values_for(predicate); end
  def formatted_values_for_attribute(attr); end
  def hash; end
  def in_predicate?(predicate); end
  def inspect; end
  def key; end
  def m; end
  def m=(val); end
  def negative?; end
  def p; end
  def p=(name); end
  def persisted?; end
  def predicate; end
  def predicate=(arg0); end
  def predicate_name; end
  def predicate_name=(name); end
  def self.extract(context, key, values); end
  def self.extract_values_for_condition(key, context = nil); end
  def self.i18n_words; end
  def v; end
  def v=(args); end
  def valid?; end
  def valid_arity?; end
  def valid_combinator?; end
  def validated_values; end
  def value; end
  def values; end
  def values=(args); end
end
class Ransack::Nodes::Sort < Ransack::Nodes::Node
  def build(params); end
  def dir; end
  def dir=(dir); end
  def name; end
  def name=(name); end
  def ransacker_args; end
  def ransacker_args=(ransack_args); end
  def self.extract(context, str); end
  def self.i18n_words; end
  def valid?; end
  include Ransack::Nodes::Bindable
end
class Ransack::Nodes::Grouping < Ransack::Nodes::Node
  def [](key); end
  def []=(key, value); end
  def attribute_method?(name); end
  def build(params); end
  def build_condition(opts = nil); end
  def build_grouping(params = nil); end
  def c; end
  def c=(conditions); end
  def combinator; end
  def combinator=(arg0); end
  def conditions; end
  def conditions=(conditions); end
  def each(*args, &block); end
  def g; end
  def g=(groupings); end
  def groupings; end
  def groupings=(groupings); end
  def initialize(context, combinator = nil); end
  def inspect; end
  def m; end
  def m=(arg0); end
  def method_missing(method_id, *args); end
  def new_condition(opts = nil); end
  def new_grouping(params = nil); end
  def persisted?; end
  def read_attribute(name); end
  def remove_duplicate_conditions!; end
  def respond_to?(method_id); end
  def self.i18n_words; end
  def strip_predicate_and_index(str); end
  def translate(key, options = nil); end
  def values; end
  def write_attribute(name, val); end
end
class Ransack::Visitor
  def accept(object); end
  def can_accept?(object); end
  def ordered(object); end
  def quoted?(object); end
  def visit(object); end
  def visit_Array(object); end
  def visit_Ransack_Nodes_Condition(object); end
  def visit_Ransack_Nodes_Grouping(object); end
  def visit_Ransack_Nodes_Sort(object); end
  def visit_and(object); end
  def visit_or(object); end
end
class Ransack::Context
  def arel_visitor; end
  def association_path(str, base = nil); end
  def auth_object; end
  def auth_object=(arg0); end
  def base; end
  def bind(object, str); end
  def bind_pair_for(key); end
  def chain_scope(scope, args); end
  def contextualize(str); end
  def engine; end
  def initialize(object, options = nil); end
  def klass; end
  def klassify(obj); end
  def object; end
  def ransackable_alias(str); end
  def ransackable_association?(str, klass); end
  def ransackable_attribute?(str, klass); end
  def ransackable_scope?(str, klass); end
  def ransackable_scope_skip_sanitize_args?(str, klass); end
  def scope_arity(scope); end
  def search; end
  def search_key; end
  def search_key=(arg0); end
  def searchable_associations(str = nil); end
  def searchable_attributes(str = nil); end
  def self.for(object, options = nil); end
  def self.for_class(klass, options = nil); end
  def self.for_object(object, options = nil); end
  def sortable_attributes(str = nil); end
  def traverse(str, base = nil); end
  def unpolymorphize_association(str); end
end
module Ransack::Naming
  def model_name; end
  def persisted?; end
  def self.included(base); end
  def to_key; end
  def to_model; end
  def to_param; end
end
class Ransack::Name < String
  def cache_key; end
  def collection; end
  def element; end
  def human; end
  def i18n_key; end
  def initialize; end
  def param_key; end
  def partial_path; end
  def plural; end
  def route_key; end
  def singular; end
end
module Ransack::ClassMethods
  def i18n_scope; end
  def model_name; end
end
class Ransack::Search
  def add_scope(key, args); end
  def base; end
  def build(params); end
  def build_condition(*args, &block); end
  def build_grouping(*args, &block); end
  def build_sort(opts = nil); end
  def collapse_multiparameter_attributes!(attrs); end
  def context; end
  def initialize(object, params = nil, options = nil); end
  def inspect; end
  def klass(*args, &block); end
  def method_missing(method_id, *args); end
  def new_condition(*args, &block); end
  def new_grouping(*args, &block); end
  def new_sort(opts = nil); end
  def object(*args, &block); end
  def result(opts = nil); end
  def s; end
  def s=(args); end
  def sanitized_scope_args(args); end
  def sorts; end
  def sorts=(args); end
  def translate(*args, &block); end
  extend Ransack::ClassMethods
  include Ransack::Naming
end
class Ransack::Ransacker
  def args; end
  def attr_from(bindable); end
  def call(*args, &block); end
  def formatter; end
  def initialize(klass, name, opts = nil, &block); end
  def name; end
  def type; end
end
module Ransack::Translate
  def self.associated_attribute(associated_class); end
  def self.association(key, options = nil); end
  def self.association_name; end
  def self.attr_fallback_name(associated_class); end
  def self.attribute(key, options = nil); end
  def self.attribute_name(context, name, include_associations = nil); end
  def self.build_interpolations(associated_class); end
  def self.default_attribute_name; end
  def self.default_interpolation(associated_class); end
  def self.fallback_args; end
  def self.fallback_class(associated_class); end
  def self.i18n_key(klass); end
  def self.predicate(key, options = nil); end
  def self.translated_ancestor_attributes; end
  def self.translated_attribute(associated_class); end
  def self.word(key, options = nil); end
end
module Ransack::Adapters::ActiveRecord
end
module Ransack::Adapters::ActiveRecord::Base
  def ransack(params = nil, options = nil); end
  def ransack_alias(new_name, old_name); end
  def ransackable_associations(auth_object = nil); end
  def ransackable_attributes(auth_object = nil); end
  def ransackable_scopes(auth_object = nil); end
  def ransackable_scopes_skip_sanitize_args; end
  def ransacker(name, opts = nil, &block); end
  def ransortable_attributes(auth_object = nil); end
  def self.extended(base); end
end
class Ransack::Adapters::ActiveRecord::Context < Ransack::Context
  def alias_tracker; end
  def attribute_method?(str, klass = nil); end
  def build_association(name, parent = nil, klass = nil); end
  def build_correlated_subquery(association); end
  def build_joins(relation); end
  def build_or_find_association(name, parent = nil, klass = nil); end
  def convert_join_strings_to_ast(table, joins); end
  def evaluate(search, opts = nil); end
  def extract_correlated_key(join_root); end
  def extract_joins(association); end
  def find_association(name, parent = nil, klass = nil); end
  def get_association(str, parent = nil); end
  def get_parent_and_attribute_name(str, parent = nil); end
  def join_dependency(relation); end
  def join_sources; end
  def klassify(obj); end
  def lock_association(association); end
  def primary_key; end
  def relation_for(object); end
  def remove_association(association); end
  def table_for(parent); end
  def type_for(attr); end
end
class Ransack::UntraversableAssociationError < StandardError
end
module ActionView::Helpers::Tags
end
class ActionView::Helpers::Tags::Base
end
module Ransack::Helpers
end
class Ransack::Helpers::FormBuilder < ActionView::Helpers::FormBuilder
  def association_array(obj, prefix = nil); end
  def association_hash(obj); end
  def association_object(obj); end
  def attr_from_base_and_column(base, column); end
  def attribute_collection_for_base(attributes, base = nil); end
  def attribute_collection_for_bases(action, bases); end
  def attribute_fields(*args, &block); end
  def attribute_select(options = nil, html_options = nil, action = nil); end
  def can_use_default?(default, attribute, values); end
  def collection_for_base(action, base); end
  def combinator_choices; end
  def combinator_select(options = nil, html_options = nil); end
  def condition_fields(*args, &block); end
  def formbuilder_error_message(action); end
  def get_attribute_element(action, base); end
  def grouping_fields(*args, &block); end
  def label(method, *args, &block); end
  def mapped_values(values); end
  def predicate_fields(*args, &block); end
  def predicate_select(options = nil, html_options = nil); end
  def search_fields(name, args, block); end
  def sort_array; end
  def sort_direction_select(options = nil, html_options = nil); end
  def sort_fields(*args, &block); end
  def sort_link(attribute, *args); end
  def sort_select(options = nil, html_options = nil); end
  def sort_url(attribute, *args); end
  def submit(value = nil, options = nil); end
  def template_collection_select(name, collection, options, html_options); end
  def template_grouped_collection_select(collection, options, html_options); end
  def value_fields(*args, &block); end
end
module Ransack::Helpers::FormHelper
  def extract_search_and_routing_proxy(search); end
  def html_option_for(option, search); end
  def options_for(record); end
  def parse_record(object); end
  def search_form_for(record, options = nil, &proc); end
  def sort_link(search_object, attribute, *args, &block); end
  def sort_url(search_object, attribute, *args); end
  def url(routing_proxy, options_for_url); end
end
class Ransack::Helpers::FormHelper::SortLink
  def default_arrow; end
  def default_sort_order(attr_name); end
  def detect_previous_sort_direction_and_invert_it(attr_name); end
  def direction_text(dir); end
  def down_arrow; end
  def existing_sort_direction(f = nil); end
  def extract_label_and_mutate_args!(args); end
  def extract_options_and_mutate_args!(args); end
  def extract_sort_fields_and_mutate_args!(args); end
  def html_options(args); end
  def initialize(search, attribute, args, params); end
  def name; end
  def no_sort_direction_specified?(dir = nil); end
  def order_indicator; end
  def parameters_hash(params); end
  def parse_sort(field); end
  def recursive_sort_params_build(fields); end
  def search_and_sort_params; end
  def search_params; end
  def sort_params; end
  def up_arrow; end
  def url_options; end
end
